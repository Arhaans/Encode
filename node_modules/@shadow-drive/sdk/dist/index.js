"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnstakeInfo = exports.UserInfo = exports.StorageConfig = exports.StorageAccountV2 = exports.StorageAccount = exports.ShdwDrive = void 0;
const helpers_1 = require("./utils/helpers");
const methods_1 = require("./methods");
const accounts_1 = require("./types/accounts");
Object.defineProperty(exports, "StorageAccount", { enumerable: true, get: function () { return accounts_1.StorageAccount; } });
Object.defineProperty(exports, "StorageAccountV2", { enumerable: true, get: function () { return accounts_1.StorageAccountV2; } });
Object.defineProperty(exports, "StorageConfig", { enumerable: true, get: function () { return accounts_1.StorageConfig; } });
Object.defineProperty(exports, "UserInfo", { enumerable: true, get: function () { return accounts_1.UserInfo; } });
Object.defineProperty(exports, "UnstakeInfo", { enumerable: true, get: function () { return accounts_1.UnstakeInfo; } });
class ShdwDrive {
    /**
     *
     * @param connection {web3.Connection} connection - initialized web3 connection object
     * @param wallet - Web3 wallet
     */
    constructor(connection, wallet) {
        this.connection = connection;
        this.wallet = wallet;
        this.createStorageAccount = methods_1.createStorageAccount;
        this.addStorage = methods_1.addStorage;
        this.claimStake = methods_1.claimStake;
        this.deleteFile = methods_1.deleteFile;
        this.deleteStorageAccount = methods_1.deleteStorageAccount;
        this.editFile = methods_1.editFile;
        this.getStorageAccountInfo = methods_1.getStorageAccInfo;
        this.getStorageAccount = methods_1.getStorageAcc;
        this.getStorageAccounts = methods_1.getStorageAccs;
        this.listObjects = methods_1.listObjects;
        this.makeStorageImmutable = methods_1.makeStorageImmutable;
        this.reduceStorage = methods_1.reduceStorage;
        this.topUp = methods_1.topUp;
        this.refreshStake = methods_1.refreshStake;
        this.cancelDeleteStorageAccount = methods_1.cancelDeleteStorageAccount;
        this.uploadFile = methods_1.uploadFile;
        this.uploadMultipleFiles = methods_1.uploadMultipleFiles;
        this.migrate = methods_1.migrate;
        this.wallet = wallet;
        this.connection = connection;
        const [program, provider] = (0, helpers_1.getAnchorEnvironmet)(wallet, connection);
        this.program = program;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.wallet && !this.wallet.publicKey) {
                return;
            }
            [this.storageConfigPDA] = yield (0, helpers_1.getStorageConfigPDA)(this.program);
            [this.userInfo] = yield (0, helpers_1.getUserInfo)(this.program, this.wallet.publicKey);
            return this;
        });
    }
}
exports.ShdwDrive = ShdwDrive;
//# sourceMappingURL=index.js.map