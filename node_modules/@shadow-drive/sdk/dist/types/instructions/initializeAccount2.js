"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeAccount2 = exports.layout = void 0;
const anchor_1 = require("@coral-xyz/anchor"); // eslint-disable-line @typescript-eslint/no-unused-vars
const borsh = __importStar(require("@coral-xyz/borsh")); // eslint-disable-line @typescript-eslint/no-unused-vars
const programId_1 = require("../programId");
exports.layout = borsh.struct([
    borsh.str("identifier"),
    borsh.u64("storage"),
]);
/**
 * Context: This is user-facing. This is to be done whenever the user decides.
 * Function: This allows the user to initialize a storage account with some specified number of bytes.
 */
function initializeAccount2(args, accounts) {
    const keys = [
        { pubkey: accounts.storageConfig, isSigner: false, isWritable: true },
        { pubkey: accounts.userInfo, isSigner: false, isWritable: true },
        { pubkey: accounts.storageAccount, isSigner: false, isWritable: true },
        { pubkey: accounts.stakeAccount, isSigner: false, isWritable: true },
        { pubkey: accounts.tokenMint, isSigner: false, isWritable: false },
        { pubkey: accounts.owner1, isSigner: true, isWritable: true },
        { pubkey: accounts.uploader, isSigner: true, isWritable: false },
        { pubkey: accounts.owner1TokenAccount, isSigner: false, isWritable: true },
        { pubkey: accounts.systemProgram, isSigner: false, isWritable: false },
        { pubkey: accounts.tokenProgram, isSigner: false, isWritable: false },
        { pubkey: accounts.rent, isSigner: false, isWritable: false },
    ];
    const identifier = Buffer.from([8, 182, 149, 144, 185, 31, 209, 105]);
    const buffer = Buffer.alloc(1000);
    const len = exports.layout.encode({
        identifier: args.identifier,
        storage: args.storage,
    }, buffer);
    const data = Buffer.concat([identifier, buffer]).slice(0, 8 + len);
    const ix = new anchor_1.web3.TransactionInstruction({
        keys,
        programId: programId_1.PROGRAM_ID,
        data,
    });
    return ix;
}
exports.initializeAccount2 = initializeAccount2;
//# sourceMappingURL=initializeAccount2.js.map