/// <reference types="bn.js" />
import { web3, BN } from "@coral-xyz/anchor";
export interface InitializeAccount2Args {
    identifier: string;
    storage: BN;
}
export interface InitializeAccount2Accounts {
    /** This account is a PDA that holds the storage configuration, including current cost per byte, */
    storageConfig: web3.PublicKey;
    /** This account is a PDA that holds a user's info (not specific to one storage account). */
    userInfo: web3.PublicKey;
    /**
     * This account is a PDA that holds a user's storage account information.
     * Upgraded to `StorageAccountV2`.
     */
    storageAccount: web3.PublicKey;
    /** This token account serves as the account which holds user's stake for file storage. */
    stakeAccount: web3.PublicKey;
    /** This is the token in question for staking. */
    tokenMint: web3.PublicKey;
    /**
     * This is the user who is initializing the storage account
     * and is automatically added as an admin
     */
    owner1: web3.PublicKey;
    /**
     * Uploader needs to sign as this txn
     * needs to be fulfilled on the middleman server
     * to create the ceph bucket
     */
    uploader: web3.PublicKey;
    /** This is the user's token account with which they are staking */
    owner1TokenAccount: web3.PublicKey;
    /** System Program */
    systemProgram: web3.PublicKey;
    /** Token Program */
    tokenProgram: web3.PublicKey;
    /** Rent Program */
    rent: web3.PublicKey;
}
export declare const layout: any;
/**
 * Context: This is user-facing. This is to be done whenever the user decides.
 * Function: This allows the user to initialize a storage account with some specified number of bytes.
 */
export declare function initializeAccount2(args: InitializeAccount2Args, accounts: InitializeAccount2Accounts): web3.TransactionInstruction;
//# sourceMappingURL=initializeAccount2.d.ts.map