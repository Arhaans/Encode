/// <reference types="bn.js" />
/// <reference types="node" />
import { web3, BN } from "@coral-xyz/anchor";
export interface StorageAccountV2Fields {
    /** Boolean to track whether storage account (and all child File accounts) are immutable */
    immutable: boolean;
    /** Delete flag */
    toBeDeleted: boolean;
    /** Delete request epoch */
    deleteRequestEpoch: number;
    /** Number of bytes of storage associated with this account */
    storage: BN;
    /** Primary owner of StorageAccount (immutable) */
    owner1: web3.PublicKey;
    /**
     * Pubkey of the token account that staked SHDW
     * Counter at time of initialization
     */
    accountCounterSeed: number;
    /** Time of storage account creation */
    creationTime: number;
    /** Time of storage account creation */
    creationEpoch: number;
    /** The last epoch through which the user paid */
    lastFeeEpoch: number;
    /**
     * Some unique identifier that the user provides.
     * Serves as a seed for storage account PDA.
     */
    identifier: string;
}
export interface StorageAccountV2JSON {
    /** Boolean to track whether storage account (and all child File accounts) are immutable */
    immutable: boolean;
    /** Delete flag */
    toBeDeleted: boolean;
    /** Delete request epoch */
    deleteRequestEpoch: number;
    /** Number of bytes of storage associated with this account */
    storage: string;
    /** Primary owner of StorageAccount (immutable) */
    owner1: string;
    /**
     * Pubkey of the token account that staked SHDW
     * Counter at time of initialization
     */
    accountCounterSeed: number;
    /** Time of storage account creation */
    creationTime: number;
    /** Time of storage account creation */
    creationEpoch: number;
    /** The last epoch through which the user paid */
    lastFeeEpoch: number;
    /**
     * Some unique identifier that the user provides.
     * Serves as a seed for storage account PDA.
     */
    identifier: string;
}
export declare class StorageAccountV2 {
    /** Boolean to track whether storage account (and all child File accounts) are immutable */
    readonly immutable: boolean;
    /** Delete flag */
    readonly toBeDeleted: boolean;
    /** Delete request epoch */
    readonly deleteRequestEpoch: number;
    /** Number of bytes of storage associated with this account */
    readonly storage: BN;
    /** Primary owner of StorageAccount (immutable) */
    readonly owner1: web3.PublicKey;
    /**
     * Pubkey of the token account that staked SHDW
     * Counter at time of initialization
     */
    readonly accountCounterSeed: number;
    /** Time of storage account creation */
    readonly creationTime: number;
    /** Time of storage account creation */
    readonly creationEpoch: number;
    /** The last epoch through which the user paid */
    readonly lastFeeEpoch: number;
    /**
     * Some unique identifier that the user provides.
     * Serves as a seed for storage account PDA.
     */
    readonly identifier: string;
    static readonly discriminator: Buffer;
    static readonly layout: any;
    constructor(fields: StorageAccountV2Fields);
    static fetch(c: web3.Connection, address: web3.PublicKey): Promise<StorageAccountV2 | null>;
    static fetchMultiple(c: web3.Connection, addresses: web3.PublicKey[]): Promise<Array<StorageAccountV2 | null>>;
    static decode(data: Buffer): StorageAccountV2;
    toJSON(): StorageAccountV2JSON;
    static fromJSON(obj: StorageAccountV2JSON): StorageAccountV2;
}
//# sourceMappingURL=StorageAccountV2.d.ts.map