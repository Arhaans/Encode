/// <reference types="bn.js" />
/// <reference types="node" />
import { web3, BN } from "@coral-xyz/anchor";
export interface UnstakeInfoFields {
    timeLastUnstaked: BN;
    epochLastUnstaked: BN;
    unstaker: web3.PublicKey;
}
export interface UnstakeInfoJSON {
    timeLastUnstaked: string;
    epochLastUnstaked: string;
    unstaker: string;
}
export declare class UnstakeInfo {
    readonly timeLastUnstaked: BN;
    readonly epochLastUnstaked: BN;
    readonly unstaker: web3.PublicKey;
    static readonly discriminator: Buffer;
    static readonly layout: any;
    constructor(fields: UnstakeInfoFields);
    static fetch(c: web3.Connection, address: web3.PublicKey): Promise<UnstakeInfo | null>;
    static fetchMultiple(c: web3.Connection, addresses: web3.PublicKey[]): Promise<Array<UnstakeInfo | null>>;
    static decode(data: Buffer): UnstakeInfo;
    toJSON(): UnstakeInfoJSON;
    static fromJSON(obj: UnstakeInfoJSON): UnstakeInfo;
}
//# sourceMappingURL=UnstakeInfo.d.ts.map