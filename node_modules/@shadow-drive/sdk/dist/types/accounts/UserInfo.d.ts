/// <reference types="node" />
import { web3 } from "@coral-xyz/anchor";
export interface UserInfoFields {
    /** Total number of storage accounts the user has with us */
    accountCounter: number;
    /** Total number of storage accounts that have been deleted */
    delCounter: number;
    /** Boolean denoting that the user agreed to terms of service */
    agreedToTos: boolean;
    /** Boolean denoting whether this pubkey has ever had a bad scam scan */
    lifetimeBadCsam: boolean;
}
export interface UserInfoJSON {
    /** Total number of storage accounts the user has with us */
    accountCounter: number;
    /** Total number of storage accounts that have been deleted */
    delCounter: number;
    /** Boolean denoting that the user agreed to terms of service */
    agreedToTos: boolean;
    /** Boolean denoting whether this pubkey has ever had a bad scam scan */
    lifetimeBadCsam: boolean;
}
export declare class UserInfo {
    /** Total number of storage accounts the user has with us */
    readonly accountCounter: number;
    /** Total number of storage accounts that have been deleted */
    readonly delCounter: number;
    /** Boolean denoting that the user agreed to terms of service */
    readonly agreedToTos: boolean;
    /** Boolean denoting whether this pubkey has ever had a bad scam scan */
    readonly lifetimeBadCsam: boolean;
    static readonly discriminator: Buffer;
    static readonly layout: any;
    constructor(fields: UserInfoFields);
    static fetch(c: web3.Connection, address: web3.PublicKey): Promise<UserInfo | null>;
    static fetchMultiple(c: web3.Connection, addresses: web3.PublicKey[]): Promise<Array<UserInfo | null>>;
    static decode(data: Buffer): UserInfo;
    toJSON(): UserInfoJSON;
    static fromJSON(obj: UserInfoJSON): UserInfo;
}
//# sourceMappingURL=UserInfo.d.ts.map