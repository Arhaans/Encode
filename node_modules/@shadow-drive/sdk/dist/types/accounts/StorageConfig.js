"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageConfig = void 0;
const anchor_1 = require("@coral-xyz/anchor");
const borsh = __importStar(require("@coral-xyz/borsh")); // eslint-disable-line @typescript-eslint/no-unused-vars
const programId_1 = require("../programId");
class StorageConfig {
    constructor(fields) {
        this.shadesPerGib = fields.shadesPerGib;
        this.storageAvailable = fields.storageAvailable;
        this.tokenAccount = fields.tokenAccount;
        this.admin2 = fields.admin2;
        this.uploader = fields.uploader;
        this.mutableFeeStartEpoch = fields.mutableFeeStartEpoch;
        this.shadesPerGibPerEpoch = fields.shadesPerGibPerEpoch;
        this.crankBps = fields.crankBps;
        this.maxAccountSize = fields.maxAccountSize;
        this.minAccountSize = fields.minAccountSize;
    }
    static fetch(c, address) {
        return __awaiter(this, void 0, void 0, function* () {
            const info = yield c.getAccountInfo(address);
            if (info === null) {
                return null;
            }
            if (!info.owner.equals(programId_1.PROGRAM_ID)) {
                throw new Error("account doesn't belong to this program");
            }
            return this.decode(info.data);
        });
    }
    static fetchMultiple(c, addresses) {
        return __awaiter(this, void 0, void 0, function* () {
            const infos = yield c.getMultipleAccountsInfo(addresses);
            return infos.map((info) => {
                if (info === null) {
                    return null;
                }
                if (!info.owner.equals(programId_1.PROGRAM_ID)) {
                    throw new Error("account doesn't belong to this program");
                }
                return this.decode(info.data);
            });
        });
    }
    static decode(data) {
        if (!data.slice(0, 8).equals(StorageConfig.discriminator)) {
            throw new Error("invalid account discriminator");
        }
        const dec = StorageConfig.layout.decode(data.slice(8));
        return new StorageConfig({
            shadesPerGib: dec.shadesPerGib,
            storageAvailable: dec.storageAvailable,
            tokenAccount: dec.tokenAccount,
            admin2: dec.admin2,
            uploader: dec.uploader,
            mutableFeeStartEpoch: dec.mutableFeeStartEpoch,
            shadesPerGibPerEpoch: dec.shadesPerGibPerEpoch,
            crankBps: dec.crankBps,
            maxAccountSize: dec.maxAccountSize,
            minAccountSize: dec.minAccountSize,
        });
    }
    toJSON() {
        return {
            shadesPerGib: this.shadesPerGib.toString(),
            storageAvailable: this.storageAvailable.toString(),
            tokenAccount: this.tokenAccount.toString(),
            admin2: this.admin2.toString(),
            uploader: this.uploader.toString(),
            mutableFeeStartEpoch: this.mutableFeeStartEpoch,
            shadesPerGibPerEpoch: this.shadesPerGibPerEpoch.toString(),
            crankBps: this.crankBps,
            maxAccountSize: this.maxAccountSize.toString(),
            minAccountSize: this.minAccountSize.toString(),
        };
    }
    static fromJSON(obj) {
        return new StorageConfig({
            shadesPerGib: new anchor_1.BN(obj.shadesPerGib),
            storageAvailable: new anchor_1.BN(obj.storageAvailable),
            tokenAccount: new anchor_1.web3.PublicKey(obj.tokenAccount),
            admin2: new anchor_1.web3.PublicKey(obj.admin2),
            uploader: new anchor_1.web3.PublicKey(obj.uploader),
            mutableFeeStartEpoch: obj.mutableFeeStartEpoch,
            shadesPerGibPerEpoch: new anchor_1.BN(obj.shadesPerGibPerEpoch),
            crankBps: obj.crankBps,
            maxAccountSize: new anchor_1.BN(obj.maxAccountSize),
            minAccountSize: new anchor_1.BN(obj.minAccountSize),
        });
    }
}
exports.StorageConfig = StorageConfig;
StorageConfig.discriminator = Buffer.from([
    90, 136, 182, 122, 243, 186, 80, 201,
]);
StorageConfig.layout = borsh.struct([
    borsh.u64("shadesPerGib"),
    borsh.u128("storageAvailable"),
    borsh.publicKey("tokenAccount"),
    borsh.publicKey("admin2"),
    borsh.publicKey("uploader"),
    borsh.option(borsh.u32(), "mutableFeeStartEpoch"),
    borsh.u64("shadesPerGibPerEpoch"),
    borsh.u16("crankBps"),
    borsh.u64("maxAccountSize"),
    borsh.u64("minAccountSize"),
]);
//# sourceMappingURL=StorageConfig.js.map