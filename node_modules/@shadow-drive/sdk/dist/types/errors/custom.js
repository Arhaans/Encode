"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromCode = exports.OnlyOneOwnerAllowedInV1_5 = exports.OnlyAdmin1CanChangeAdmins = exports.IdentifierExceededMaxLength = exports.EmptyStakeAccount = exports.AlreadyMarkedForDeletion = exports.NeedSomeCrankBps = exports.NeedSomeFees = exports.FailedToReturnUserFunds = exports.FailedToTransferToEmissionsWalletFromUser = exports.FailedToTransferToEmissionsWallet = exports.FailedToCloseAccount = exports.InvalidTokenTransferAmounts = exports.DidNotAgreeToToS = exports.AccountTooSmall = exports.NotEnoughStorageOnShadowDrive = exports.InsufficientFunds = exports.ExceededStorageLimit = exports.NoStorageIncrease = exports.FileMarkedImmutable = exports.FileNotMarkedToBeDeleted = exports.FileStillInGracePeriod = exports.AccountNotMarkedToBeDeleted = exports.AccountStillInGracePeriod = exports.NonzeroRemainingFileAccounts = exports.UnsignedIntegerCastFailed = exports.RemovingTooMuchStorage = exports.SolanaStorageAccountNotMutable = exports.ClaimingStakeTooSoon = exports.StorageAccountMarkedImmutable = exports.HasHadBadCsam = exports.InvalidSha256Hash = exports.FileNameLengthExceedsLimit = exports.NotEnoughStorage = void 0;
class NotEnoughStorage extends Error {
    constructor(logs) {
        super("6000: Not enough storage available on this Storage Account");
        this.logs = logs;
        this.code = 6000;
        this.name = "NotEnoughStorage";
        this.msg = "Not enough storage available on this Storage Account";
    }
}
exports.NotEnoughStorage = NotEnoughStorage;
NotEnoughStorage.code = 6000;
class FileNameLengthExceedsLimit extends Error {
    constructor(logs) {
        super("6001: The length of the file name exceeds the limit of 32 bytes");
        this.logs = logs;
        this.code = 6001;
        this.name = "FileNameLengthExceedsLimit";
        this.msg = "The length of the file name exceeds the limit of 32 bytes";
    }
}
exports.FileNameLengthExceedsLimit = FileNameLengthExceedsLimit;
FileNameLengthExceedsLimit.code = 6001;
class InvalidSha256Hash extends Error {
    constructor(logs) {
        super("6002: Invalid sha256 hash");
        this.logs = logs;
        this.code = 6002;
        this.name = "InvalidSha256Hash";
        this.msg = "Invalid sha256 hash";
    }
}
exports.InvalidSha256Hash = InvalidSha256Hash;
InvalidSha256Hash.code = 6002;
class HasHadBadCsam extends Error {
    constructor(logs) {
        super("6003: User at some point had a bad csam scan");
        this.logs = logs;
        this.code = 6003;
        this.name = "HasHadBadCsam";
        this.msg = "User at some point had a bad csam scan";
    }
}
exports.HasHadBadCsam = HasHadBadCsam;
HasHadBadCsam.code = 6003;
class StorageAccountMarkedImmutable extends Error {
    constructor(logs) {
        super("6004: Storage account is marked as immutable");
        this.logs = logs;
        this.code = 6004;
        this.name = "StorageAccountMarkedImmutable";
        this.msg = "Storage account is marked as immutable";
    }
}
exports.StorageAccountMarkedImmutable = StorageAccountMarkedImmutable;
StorageAccountMarkedImmutable.code = 6004;
class ClaimingStakeTooSoon extends Error {
    constructor(logs) {
        super("6005: User has not waited enough time to claim stake");
        this.logs = logs;
        this.code = 6005;
        this.name = "ClaimingStakeTooSoon";
        this.msg = "User has not waited enough time to claim stake";
    }
}
exports.ClaimingStakeTooSoon = ClaimingStakeTooSoon;
ClaimingStakeTooSoon.code = 6005;
class SolanaStorageAccountNotMutable extends Error {
    constructor(logs) {
        super("6006: The storage account needs to be marked as mutable to update last fee collection epoch");
        this.logs = logs;
        this.code = 6006;
        this.name = "SolanaStorageAccountNotMutable";
        this.msg = "The storage account needs to be marked as mutable to update last fee collection epoch";
    }
}
exports.SolanaStorageAccountNotMutable = SolanaStorageAccountNotMutable;
SolanaStorageAccountNotMutable.code = 6006;
class RemovingTooMuchStorage extends Error {
    constructor(logs) {
        super("6007: Attempting to decrease storage by more than is available");
        this.logs = logs;
        this.code = 6007;
        this.name = "RemovingTooMuchStorage";
        this.msg = "Attempting to decrease storage by more than is available";
    }
}
exports.RemovingTooMuchStorage = RemovingTooMuchStorage;
RemovingTooMuchStorage.code = 6007;
class UnsignedIntegerCastFailed extends Error {
    constructor(logs) {
        super("6008: u128 -> u64 cast failed");
        this.logs = logs;
        this.code = 6008;
        this.name = "UnsignedIntegerCastFailed";
        this.msg = "u128 -> u64 cast failed";
    }
}
exports.UnsignedIntegerCastFailed = UnsignedIntegerCastFailed;
UnsignedIntegerCastFailed.code = 6008;
class NonzeroRemainingFileAccounts extends Error {
    constructor(logs) {
        super("6009: This storage account still has some file accounts associated with it that have not been deleted");
        this.logs = logs;
        this.code = 6009;
        this.name = "NonzeroRemainingFileAccounts";
        this.msg = "This storage account still has some file accounts associated with it that have not been deleted";
    }
}
exports.NonzeroRemainingFileAccounts = NonzeroRemainingFileAccounts;
NonzeroRemainingFileAccounts.code = 6009;
class AccountStillInGracePeriod extends Error {
    constructor(logs) {
        super("6010: This account is still within deletion grace period");
        this.logs = logs;
        this.code = 6010;
        this.name = "AccountStillInGracePeriod";
        this.msg = "This account is still within deletion grace period";
    }
}
exports.AccountStillInGracePeriod = AccountStillInGracePeriod;
AccountStillInGracePeriod.code = 6010;
class AccountNotMarkedToBeDeleted extends Error {
    constructor(logs) {
        super("6011: This account is not marked to be deleted");
        this.logs = logs;
        this.code = 6011;
        this.name = "AccountNotMarkedToBeDeleted";
        this.msg = "This account is not marked to be deleted";
    }
}
exports.AccountNotMarkedToBeDeleted = AccountNotMarkedToBeDeleted;
AccountNotMarkedToBeDeleted.code = 6011;
class FileStillInGracePeriod extends Error {
    constructor(logs) {
        super("6012: This file is still within deletion grace period");
        this.logs = logs;
        this.code = 6012;
        this.name = "FileStillInGracePeriod";
        this.msg = "This file is still within deletion grace period";
    }
}
exports.FileStillInGracePeriod = FileStillInGracePeriod;
FileStillInGracePeriod.code = 6012;
class FileNotMarkedToBeDeleted extends Error {
    constructor(logs) {
        super("6013: This file is not marked to be deleted");
        this.logs = logs;
        this.code = 6013;
        this.name = "FileNotMarkedToBeDeleted";
        this.msg = "This file is not marked to be deleted";
    }
}
exports.FileNotMarkedToBeDeleted = FileNotMarkedToBeDeleted;
FileNotMarkedToBeDeleted.code = 6013;
class FileMarkedImmutable extends Error {
    constructor(logs) {
        super("6014: File has been marked as immutable and cannot be edited");
        this.logs = logs;
        this.code = 6014;
        this.name = "FileMarkedImmutable";
        this.msg = "File has been marked as immutable and cannot be edited";
    }
}
exports.FileMarkedImmutable = FileMarkedImmutable;
FileMarkedImmutable.code = 6014;
class NoStorageIncrease extends Error {
    constructor(logs) {
        super("6015: User requested an increase of zero bytes");
        this.logs = logs;
        this.code = 6015;
        this.name = "NoStorageIncrease";
        this.msg = "User requested an increase of zero bytes";
    }
}
exports.NoStorageIncrease = NoStorageIncrease;
NoStorageIncrease.code = 6015;
class ExceededStorageLimit extends Error {
    constructor(logs) {
        super("6016: Requested a storage account with storage over the limit");
        this.logs = logs;
        this.code = 6016;
        this.name = "ExceededStorageLimit";
        this.msg = "Requested a storage account with storage over the limit";
    }
}
exports.ExceededStorageLimit = ExceededStorageLimit;
ExceededStorageLimit.code = 6016;
class InsufficientFunds extends Error {
    constructor(logs) {
        super("6017: User does not have enough funds to store requested number of bytes.");
        this.logs = logs;
        this.code = 6017;
        this.name = "InsufficientFunds";
        this.msg = "User does not have enough funds to store requested number of bytes.";
    }
}
exports.InsufficientFunds = InsufficientFunds;
InsufficientFunds.code = 6017;
class NotEnoughStorageOnShadowDrive extends Error {
    constructor(logs) {
        super("6018: There is not available storage on Shadow Drive. Good job!");
        this.logs = logs;
        this.code = 6018;
        this.name = "NotEnoughStorageOnShadowDrive";
        this.msg = "There is not available storage on Shadow Drive. Good job!";
    }
}
exports.NotEnoughStorageOnShadowDrive = NotEnoughStorageOnShadowDrive;
NotEnoughStorageOnShadowDrive.code = 6018;
class AccountTooSmall extends Error {
    constructor(logs) {
        super("6019: Requested a storage account with storage under the limit");
        this.logs = logs;
        this.code = 6019;
        this.name = "AccountTooSmall";
        this.msg = "Requested a storage account with storage under the limit";
    }
}
exports.AccountTooSmall = AccountTooSmall;
AccountTooSmall.code = 6019;
class DidNotAgreeToToS extends Error {
    constructor(logs) {
        super("6020: User did not agree to terms of service");
        this.logs = logs;
        this.code = 6020;
        this.name = "DidNotAgreeToToS";
        this.msg = "User did not agree to terms of service";
    }
}
exports.DidNotAgreeToToS = DidNotAgreeToToS;
DidNotAgreeToToS.code = 6020;
class InvalidTokenTransferAmounts extends Error {
    constructor(logs) {
        super("6021: Invalid token transfers. Stake account nonempty.");
        this.logs = logs;
        this.code = 6021;
        this.name = "InvalidTokenTransferAmounts";
        this.msg = "Invalid token transfers. Stake account nonempty.";
    }
}
exports.InvalidTokenTransferAmounts = InvalidTokenTransferAmounts;
InvalidTokenTransferAmounts.code = 6021;
class FailedToCloseAccount extends Error {
    constructor(logs) {
        super("6022: Failed to close spl token account");
        this.logs = logs;
        this.code = 6022;
        this.name = "FailedToCloseAccount";
        this.msg = "Failed to close spl token account";
    }
}
exports.FailedToCloseAccount = FailedToCloseAccount;
FailedToCloseAccount.code = 6022;
class FailedToTransferToEmissionsWallet extends Error {
    constructor(logs) {
        super("6023: Failed to transfer to emissions wallet");
        this.logs = logs;
        this.code = 6023;
        this.name = "FailedToTransferToEmissionsWallet";
        this.msg = "Failed to transfer to emissions wallet";
    }
}
exports.FailedToTransferToEmissionsWallet = FailedToTransferToEmissionsWallet;
FailedToTransferToEmissionsWallet.code = 6023;
class FailedToTransferToEmissionsWalletFromUser extends Error {
    constructor(logs) {
        super("6024: Failed to transfer to emissions wallet from user");
        this.logs = logs;
        this.code = 6024;
        this.name = "FailedToTransferToEmissionsWalletFromUser";
        this.msg = "Failed to transfer to emissions wallet from user";
    }
}
exports.FailedToTransferToEmissionsWalletFromUser = FailedToTransferToEmissionsWalletFromUser;
FailedToTransferToEmissionsWalletFromUser.code = 6024;
class FailedToReturnUserFunds extends Error {
    constructor(logs) {
        super("6025: Failed to return user funds");
        this.logs = logs;
        this.code = 6025;
        this.name = "FailedToReturnUserFunds";
        this.msg = "Failed to return user funds";
    }
}
exports.FailedToReturnUserFunds = FailedToReturnUserFunds;
FailedToReturnUserFunds.code = 6025;
class NeedSomeFees extends Error {
    constructor(logs) {
        super("6026: Turning on fees and passing in None for storage cost per epoch");
        this.logs = logs;
        this.code = 6026;
        this.name = "NeedSomeFees";
        this.msg = "Turning on fees and passing in None for storage cost per epoch";
    }
}
exports.NeedSomeFees = NeedSomeFees;
NeedSomeFees.code = 6026;
class NeedSomeCrankBps extends Error {
    constructor(logs) {
        super("6027: Turning on fees and passing in None for crank bps");
        this.logs = logs;
        this.code = 6027;
        this.name = "NeedSomeCrankBps";
        this.msg = "Turning on fees and passing in None for crank bps";
    }
}
exports.NeedSomeCrankBps = NeedSomeCrankBps;
NeedSomeCrankBps.code = 6027;
class AlreadyMarkedForDeletion extends Error {
    constructor(logs) {
        super("6028: This account is already marked to be deleted");
        this.logs = logs;
        this.code = 6028;
        this.name = "AlreadyMarkedForDeletion";
        this.msg = "This account is already marked to be deleted";
    }
}
exports.AlreadyMarkedForDeletion = AlreadyMarkedForDeletion;
AlreadyMarkedForDeletion.code = 6028;
class EmptyStakeAccount extends Error {
    constructor(logs) {
        super("6029: User has an empty stake account and must refresh stake account before unmarking account for deletion");
        this.logs = logs;
        this.code = 6029;
        this.name = "EmptyStakeAccount";
        this.msg = "User has an empty stake account and must refresh stake account before unmarking account for deletion";
    }
}
exports.EmptyStakeAccount = EmptyStakeAccount;
EmptyStakeAccount.code = 6029;
class IdentifierExceededMaxLength extends Error {
    constructor(logs) {
        super("6030: New identifier exceeds maximum length of 64 bytes");
        this.logs = logs;
        this.code = 6030;
        this.name = "IdentifierExceededMaxLength";
        this.msg = "New identifier exceeds maximum length of 64 bytes";
    }
}
exports.IdentifierExceededMaxLength = IdentifierExceededMaxLength;
IdentifierExceededMaxLength.code = 6030;
class OnlyAdmin1CanChangeAdmins extends Error {
    constructor(logs) {
        super("6031: Only admin1 can change admins");
        this.logs = logs;
        this.code = 6031;
        this.name = "OnlyAdmin1CanChangeAdmins";
        this.msg = "Only admin1 can change admins";
    }
}
exports.OnlyAdmin1CanChangeAdmins = OnlyAdmin1CanChangeAdmins;
OnlyAdmin1CanChangeAdmins.code = 6031;
class OnlyOneOwnerAllowedInV1_5 extends Error {
    constructor(logs) {
        super("6032: (As part of on-chain storage optimizations, only one owner is allowed in Shadow Drive v1.5)");
        this.logs = logs;
        this.code = 6032;
        this.name = "OnlyOneOwnerAllowedInV1_5";
        this.msg = "(As part of on-chain storage optimizations, only one owner is allowed in Shadow Drive v1.5)";
    }
}
exports.OnlyOneOwnerAllowedInV1_5 = OnlyOneOwnerAllowedInV1_5;
OnlyOneOwnerAllowedInV1_5.code = 6032;
function fromCode(code, logs) {
    switch (code) {
        case 6000:
            return new NotEnoughStorage(logs);
        case 6001:
            return new FileNameLengthExceedsLimit(logs);
        case 6002:
            return new InvalidSha256Hash(logs);
        case 6003:
            return new HasHadBadCsam(logs);
        case 6004:
            return new StorageAccountMarkedImmutable(logs);
        case 6005:
            return new ClaimingStakeTooSoon(logs);
        case 6006:
            return new SolanaStorageAccountNotMutable(logs);
        case 6007:
            return new RemovingTooMuchStorage(logs);
        case 6008:
            return new UnsignedIntegerCastFailed(logs);
        case 6009:
            return new NonzeroRemainingFileAccounts(logs);
        case 6010:
            return new AccountStillInGracePeriod(logs);
        case 6011:
            return new AccountNotMarkedToBeDeleted(logs);
        case 6012:
            return new FileStillInGracePeriod(logs);
        case 6013:
            return new FileNotMarkedToBeDeleted(logs);
        case 6014:
            return new FileMarkedImmutable(logs);
        case 6015:
            return new NoStorageIncrease(logs);
        case 6016:
            return new ExceededStorageLimit(logs);
        case 6017:
            return new InsufficientFunds(logs);
        case 6018:
            return new NotEnoughStorageOnShadowDrive(logs);
        case 6019:
            return new AccountTooSmall(logs);
        case 6020:
            return new DidNotAgreeToToS(logs);
        case 6021:
            return new InvalidTokenTransferAmounts(logs);
        case 6022:
            return new FailedToCloseAccount(logs);
        case 6023:
            return new FailedToTransferToEmissionsWallet(logs);
        case 6024:
            return new FailedToTransferToEmissionsWalletFromUser(logs);
        case 6025:
            return new FailedToReturnUserFunds(logs);
        case 6026:
            return new NeedSomeFees(logs);
        case 6027:
            return new NeedSomeCrankBps(logs);
        case 6028:
            return new AlreadyMarkedForDeletion(logs);
        case 6029:
            return new EmptyStakeAccount(logs);
        case 6030:
            return new IdentifierExceededMaxLength(logs);
        case 6031:
            return new OnlyAdmin1CanChangeAdmins(logs);
        case 6032:
            return new OnlyOneOwnerAllowedInV1_5(logs);
    }
    return null;
}
exports.fromCode = fromCode;
//# sourceMappingURL=custom.js.map