export declare type CustomError = NotEnoughStorage | FileNameLengthExceedsLimit | InvalidSha256Hash | HasHadBadCsam | StorageAccountMarkedImmutable | ClaimingStakeTooSoon | SolanaStorageAccountNotMutable | RemovingTooMuchStorage | UnsignedIntegerCastFailed | NonzeroRemainingFileAccounts | AccountStillInGracePeriod | AccountNotMarkedToBeDeleted | FileStillInGracePeriod | FileNotMarkedToBeDeleted | FileMarkedImmutable | NoStorageIncrease | ExceededStorageLimit | InsufficientFunds | NotEnoughStorageOnShadowDrive | AccountTooSmall | DidNotAgreeToToS | InvalidTokenTransferAmounts | FailedToCloseAccount | FailedToTransferToEmissionsWallet | FailedToTransferToEmissionsWalletFromUser | FailedToReturnUserFunds | NeedSomeFees | NeedSomeCrankBps | AlreadyMarkedForDeletion | EmptyStakeAccount | IdentifierExceededMaxLength | OnlyAdmin1CanChangeAdmins | OnlyOneOwnerAllowedInV1_5;
export declare class NotEnoughStorage extends Error {
    readonly logs?: string[];
    static readonly code = 6000;
    readonly code = 6000;
    readonly name = "NotEnoughStorage";
    readonly msg = "Not enough storage available on this Storage Account";
    constructor(logs?: string[]);
}
export declare class FileNameLengthExceedsLimit extends Error {
    readonly logs?: string[];
    static readonly code = 6001;
    readonly code = 6001;
    readonly name = "FileNameLengthExceedsLimit";
    readonly msg = "The length of the file name exceeds the limit of 32 bytes";
    constructor(logs?: string[]);
}
export declare class InvalidSha256Hash extends Error {
    readonly logs?: string[];
    static readonly code = 6002;
    readonly code = 6002;
    readonly name = "InvalidSha256Hash";
    readonly msg = "Invalid sha256 hash";
    constructor(logs?: string[]);
}
export declare class HasHadBadCsam extends Error {
    readonly logs?: string[];
    static readonly code = 6003;
    readonly code = 6003;
    readonly name = "HasHadBadCsam";
    readonly msg = "User at some point had a bad csam scan";
    constructor(logs?: string[]);
}
export declare class StorageAccountMarkedImmutable extends Error {
    readonly logs?: string[];
    static readonly code = 6004;
    readonly code = 6004;
    readonly name = "StorageAccountMarkedImmutable";
    readonly msg = "Storage account is marked as immutable";
    constructor(logs?: string[]);
}
export declare class ClaimingStakeTooSoon extends Error {
    readonly logs?: string[];
    static readonly code = 6005;
    readonly code = 6005;
    readonly name = "ClaimingStakeTooSoon";
    readonly msg = "User has not waited enough time to claim stake";
    constructor(logs?: string[]);
}
export declare class SolanaStorageAccountNotMutable extends Error {
    readonly logs?: string[];
    static readonly code = 6006;
    readonly code = 6006;
    readonly name = "SolanaStorageAccountNotMutable";
    readonly msg = "The storage account needs to be marked as mutable to update last fee collection epoch";
    constructor(logs?: string[]);
}
export declare class RemovingTooMuchStorage extends Error {
    readonly logs?: string[];
    static readonly code = 6007;
    readonly code = 6007;
    readonly name = "RemovingTooMuchStorage";
    readonly msg = "Attempting to decrease storage by more than is available";
    constructor(logs?: string[]);
}
export declare class UnsignedIntegerCastFailed extends Error {
    readonly logs?: string[];
    static readonly code = 6008;
    readonly code = 6008;
    readonly name = "UnsignedIntegerCastFailed";
    readonly msg = "u128 -> u64 cast failed";
    constructor(logs?: string[]);
}
export declare class NonzeroRemainingFileAccounts extends Error {
    readonly logs?: string[];
    static readonly code = 6009;
    readonly code = 6009;
    readonly name = "NonzeroRemainingFileAccounts";
    readonly msg = "This storage account still has some file accounts associated with it that have not been deleted";
    constructor(logs?: string[]);
}
export declare class AccountStillInGracePeriod extends Error {
    readonly logs?: string[];
    static readonly code = 6010;
    readonly code = 6010;
    readonly name = "AccountStillInGracePeriod";
    readonly msg = "This account is still within deletion grace period";
    constructor(logs?: string[]);
}
export declare class AccountNotMarkedToBeDeleted extends Error {
    readonly logs?: string[];
    static readonly code = 6011;
    readonly code = 6011;
    readonly name = "AccountNotMarkedToBeDeleted";
    readonly msg = "This account is not marked to be deleted";
    constructor(logs?: string[]);
}
export declare class FileStillInGracePeriod extends Error {
    readonly logs?: string[];
    static readonly code = 6012;
    readonly code = 6012;
    readonly name = "FileStillInGracePeriod";
    readonly msg = "This file is still within deletion grace period";
    constructor(logs?: string[]);
}
export declare class FileNotMarkedToBeDeleted extends Error {
    readonly logs?: string[];
    static readonly code = 6013;
    readonly code = 6013;
    readonly name = "FileNotMarkedToBeDeleted";
    readonly msg = "This file is not marked to be deleted";
    constructor(logs?: string[]);
}
export declare class FileMarkedImmutable extends Error {
    readonly logs?: string[];
    static readonly code = 6014;
    readonly code = 6014;
    readonly name = "FileMarkedImmutable";
    readonly msg = "File has been marked as immutable and cannot be edited";
    constructor(logs?: string[]);
}
export declare class NoStorageIncrease extends Error {
    readonly logs?: string[];
    static readonly code = 6015;
    readonly code = 6015;
    readonly name = "NoStorageIncrease";
    readonly msg = "User requested an increase of zero bytes";
    constructor(logs?: string[]);
}
export declare class ExceededStorageLimit extends Error {
    readonly logs?: string[];
    static readonly code = 6016;
    readonly code = 6016;
    readonly name = "ExceededStorageLimit";
    readonly msg = "Requested a storage account with storage over the limit";
    constructor(logs?: string[]);
}
export declare class InsufficientFunds extends Error {
    readonly logs?: string[];
    static readonly code = 6017;
    readonly code = 6017;
    readonly name = "InsufficientFunds";
    readonly msg = "User does not have enough funds to store requested number of bytes.";
    constructor(logs?: string[]);
}
export declare class NotEnoughStorageOnShadowDrive extends Error {
    readonly logs?: string[];
    static readonly code = 6018;
    readonly code = 6018;
    readonly name = "NotEnoughStorageOnShadowDrive";
    readonly msg = "There is not available storage on Shadow Drive. Good job!";
    constructor(logs?: string[]);
}
export declare class AccountTooSmall extends Error {
    readonly logs?: string[];
    static readonly code = 6019;
    readonly code = 6019;
    readonly name = "AccountTooSmall";
    readonly msg = "Requested a storage account with storage under the limit";
    constructor(logs?: string[]);
}
export declare class DidNotAgreeToToS extends Error {
    readonly logs?: string[];
    static readonly code = 6020;
    readonly code = 6020;
    readonly name = "DidNotAgreeToToS";
    readonly msg = "User did not agree to terms of service";
    constructor(logs?: string[]);
}
export declare class InvalidTokenTransferAmounts extends Error {
    readonly logs?: string[];
    static readonly code = 6021;
    readonly code = 6021;
    readonly name = "InvalidTokenTransferAmounts";
    readonly msg = "Invalid token transfers. Stake account nonempty.";
    constructor(logs?: string[]);
}
export declare class FailedToCloseAccount extends Error {
    readonly logs?: string[];
    static readonly code = 6022;
    readonly code = 6022;
    readonly name = "FailedToCloseAccount";
    readonly msg = "Failed to close spl token account";
    constructor(logs?: string[]);
}
export declare class FailedToTransferToEmissionsWallet extends Error {
    readonly logs?: string[];
    static readonly code = 6023;
    readonly code = 6023;
    readonly name = "FailedToTransferToEmissionsWallet";
    readonly msg = "Failed to transfer to emissions wallet";
    constructor(logs?: string[]);
}
export declare class FailedToTransferToEmissionsWalletFromUser extends Error {
    readonly logs?: string[];
    static readonly code = 6024;
    readonly code = 6024;
    readonly name = "FailedToTransferToEmissionsWalletFromUser";
    readonly msg = "Failed to transfer to emissions wallet from user";
    constructor(logs?: string[]);
}
export declare class FailedToReturnUserFunds extends Error {
    readonly logs?: string[];
    static readonly code = 6025;
    readonly code = 6025;
    readonly name = "FailedToReturnUserFunds";
    readonly msg = "Failed to return user funds";
    constructor(logs?: string[]);
}
export declare class NeedSomeFees extends Error {
    readonly logs?: string[];
    static readonly code = 6026;
    readonly code = 6026;
    readonly name = "NeedSomeFees";
    readonly msg = "Turning on fees and passing in None for storage cost per epoch";
    constructor(logs?: string[]);
}
export declare class NeedSomeCrankBps extends Error {
    readonly logs?: string[];
    static readonly code = 6027;
    readonly code = 6027;
    readonly name = "NeedSomeCrankBps";
    readonly msg = "Turning on fees and passing in None for crank bps";
    constructor(logs?: string[]);
}
export declare class AlreadyMarkedForDeletion extends Error {
    readonly logs?: string[];
    static readonly code = 6028;
    readonly code = 6028;
    readonly name = "AlreadyMarkedForDeletion";
    readonly msg = "This account is already marked to be deleted";
    constructor(logs?: string[]);
}
export declare class EmptyStakeAccount extends Error {
    readonly logs?: string[];
    static readonly code = 6029;
    readonly code = 6029;
    readonly name = "EmptyStakeAccount";
    readonly msg = "User has an empty stake account and must refresh stake account before unmarking account for deletion";
    constructor(logs?: string[]);
}
export declare class IdentifierExceededMaxLength extends Error {
    readonly logs?: string[];
    static readonly code = 6030;
    readonly code = 6030;
    readonly name = "IdentifierExceededMaxLength";
    readonly msg = "New identifier exceeds maximum length of 64 bytes";
    constructor(logs?: string[]);
}
export declare class OnlyAdmin1CanChangeAdmins extends Error {
    readonly logs?: string[];
    static readonly code = 6031;
    readonly code = 6031;
    readonly name = "OnlyAdmin1CanChangeAdmins";
    readonly msg = "Only admin1 can change admins";
    constructor(logs?: string[]);
}
export declare class OnlyOneOwnerAllowedInV1_5 extends Error {
    readonly logs?: string[];
    static readonly code = 6032;
    readonly code = 6032;
    readonly name = "OnlyOneOwnerAllowedInV1_5";
    readonly msg = "(As part of on-chain storage optimizations, only one owner is allowed in Shadow Drive v1.5)";
    constructor(logs?: string[]);
}
export declare function fromCode(code: number, logs?: string[]): CustomError | null;
//# sourceMappingURL=custom.d.ts.map