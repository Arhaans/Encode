"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const anchor_1 = require("@coral-xyz/anchor");
const errors_1 = require("../types/errors");
const instructions_1 = require("../types/instructions");
const accounts_1 = require("../types/accounts");
/**
 *
 * @param {web3.PublicKey} key - PublicKey of a Storage Account
 * @returns {ShadowDriveResponse} - Confirmed transaction ID
 */
function migrate(key) {
    return __awaiter(this, void 0, void 0, function* () {
        const selectedAccount = yield accounts_1.StorageAccount.fetch(this.connection, key);
        let [migration, migrationBump] = yield anchor_1.web3.PublicKey.findProgramAddress([Buffer.from("migration-helper"), key.toBytes()], this.program.programId);
        let step1Res;
        try {
            let tx = new anchor_1.web3.Transaction();
            const migrateIx = (0, instructions_1.migrateStep1)({
                storageAccount: key,
                migration: migration,
                owner: selectedAccount.owner1,
                systemProgram: anchor_1.web3.SystemProgram.programId,
            });
            tx.add(migrateIx);
            let blockInfo = yield this.connection.getLatestBlockhash();
            tx.recentBlockhash = blockInfo.blockhash;
            tx.feePayer = this.wallet.publicKey;
            const signedTx = yield this.wallet.signTransaction(tx);
            step1Res = yield anchor_1.web3.sendAndConfirmRawTransaction(this.connection, signedTx.serialize(), { skipPreflight: false, commitment: "confirmed" });
        }
        catch (err) {
            const parsedError = (0, errors_1.fromTxError)(err);
            if (parsedError !== null) {
                return Promise.reject(new Error(parsedError.msg));
            }
            else {
                return Promise.reject(new Error(err));
            }
        }
        let step2Res;
        try {
            let tx2 = new anchor_1.web3.Transaction();
            const migrate2Ix = (0, instructions_1.migrateStep2)({
                storageAccount: key,
                migration: migration,
                owner: selectedAccount.owner1,
                systemProgram: anchor_1.web3.SystemProgram.programId,
            });
            tx2.add(migrate2Ix);
            let blockInfo = yield this.connection.getLatestBlockhash();
            tx2.recentBlockhash = blockInfo.blockhash;
            tx2.feePayer = this.wallet.publicKey;
            const signedTx = yield this.wallet.signTransaction(tx2);
            step2Res = yield anchor_1.web3.sendAndConfirmRawTransaction(this.connection, signedTx.serialize(), { skipPreflight: false, commitment: "confirmed" });
        }
        catch (err) {
            const parsedError = (0, errors_1.fromTxError)(err);
            if (parsedError !== null) {
                return Promise.reject(new Error(parsedError.msg));
            }
            else {
                return Promise.reject(new Error(err));
            }
        }
        return Promise.resolve({ step1_sig: step1Res, step2_sig: step2Res });
    });
}
exports.default = migrate;
//# sourceMappingURL=migrate.js.map