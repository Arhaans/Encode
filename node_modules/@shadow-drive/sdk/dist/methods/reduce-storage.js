"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const anchor_1 = require("@coral-xyz/anchor");
const helpers_1 = require("../utils/helpers");
const common_1 = require("../utils/common");
const spl_token_1 = require("@solana/spl-token");
const node_fetch_1 = __importDefault(require("node-fetch"));
const instructions_1 = require("../types/instructions");
const accounts_1 = require("../types/accounts");
const programId_1 = require("../types/programId");
/**
 *
 * @param {web3.PublicKey} key - Publickey of a Storage Account
 * @param {string} size - Amount of storage you are requesting to reduce from your storage account. Should be in a string like '1KB', '1MB', '1GB'. Only KB, MB, and GB storage delineations are supported currently.
 * @returns {ShadowDriveResponse} - Confirmed transaction ID
 */
function reduceStorage(key, size, priorityFee = 100000) {
    return __awaiter(this, void 0, void 0, function* () {
        let storageInputAsBytes = (0, helpers_1.humanSizeToBytes)(size);
        let selectedAccount = yield accounts_1.StorageAccountV2.fetch(this.connection, key);
        const [unstakeAccount] = yield anchor_1.web3.PublicKey.findProgramAddress([Buffer.from("unstake-account"), key.toBytes()], programId_1.PROGRAM_ID);
        const [unstakeInfo] = yield anchor_1.web3.PublicKey.findProgramAddress([Buffer.from("unstake-info"), key.toBytes()], programId_1.PROGRAM_ID);
        const ownerAta = yield (0, helpers_1.findAssociatedTokenAddress)(selectedAccount.owner1, common_1.tokenMint);
        let stakeAccount = (yield (0, helpers_1.getStakeAccount)(this.program, key))[0];
        const emissionsAta = yield (0, helpers_1.findAssociatedTokenAddress)(common_1.emissions, common_1.tokenMint);
        try {
            const storageUsed = yield (0, helpers_1.getStorageAccountSize)(key.toString());
            let txn = new anchor_1.web3.Transaction();
            const decreaseStorageIx2 = (0, instructions_1.decreaseStorage2)({
                storageUsed: new anchor_1.BN(storageUsed),
                removeStorage: new anchor_1.BN(storageInputAsBytes.toString()),
            }, {
                storageConfig: this.storageConfigPDA,
                storageAccount: key,
                unstakeInfo,
                unstakeAccount,
                owner: selectedAccount.owner1,
                ownerAta,
                uploader: common_1.uploader,
                stakeAccount,
                emissionsWallet: emissionsAta,
                tokenMint: common_1.tokenMint,
                systemProgram: anchor_1.web3.SystemProgram.programId,
                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
                rent: anchor_1.web3.SYSVAR_RENT_PUBKEY,
            });
            const computePriceIx = anchor_1.web3.ComputeBudgetProgram.setComputeUnitPrice({
                microLamports: Math.ceil(priorityFee),
            });
            const [units, blockHashInfo] = yield Promise.all([
                (0, helpers_1.getSimulationUnits)(this.connection, [computePriceIx, decreaseStorageIx2], this.wallet.publicKey),
                this.connection,
            ]);
            if (typeof units !== "undefined") {
                txn.add(anchor_1.web3.ComputeBudgetProgram.setComputeUnitLimit({ units }));
            }
            txn.add(computePriceIx);
            txn.add(decreaseStorageIx2);
            txn.recentBlockhash = (yield this.connection.getLatestBlockhash()).blockhash;
            txn.feePayer = this.wallet.publicKey;
            let signedTx;
            let serializedTxn;
            if (!common_1.isBrowser) {
                yield txn.partialSign(this.wallet.payer);
                serializedTxn = txn.serialize({ requireAllSignatures: false });
            }
            else {
                signedTx = yield this.wallet.signTransaction(txn);
                serializedTxn = signedTx.serialize({ requireAllSignatures: false });
            }
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 7200000);
            const reduceStorageResponse = yield (0, node_fetch_1.default)(`${common_1.SHDW_DRIVE_ENDPOINT}/reduce-storage`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    transaction: Buffer.from(serializedTxn.toJSON().data).toString("base64"),
                    storage_account: key,
                    amount_to_reduce: storageInputAsBytes,
                    storageUsed: storageUsed,
                }),
                signal: controller.signal,
            });
            const res = yield reduceStorageResponse.json();
            if (!reduceStorageResponse.ok) {
                return Promise.reject(new Error(`Server response status code: ${reduceStorageResponse.status} \n
			Server response status message: ${res.error}`));
            }
            const responseJson = res;
            return Promise.resolve(responseJson);
        }
        catch (e) {
            return Promise.reject(new Error(e.message));
        }
    });
}
exports.default = reduceStorage;
//# sourceMappingURL=reduce-storage.js.map