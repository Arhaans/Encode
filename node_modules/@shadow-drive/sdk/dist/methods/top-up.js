"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const anchor_1 = require("@coral-xyz/anchor");
const helpers_1 = require("../utils/helpers");
const common_1 = require("../utils/common");
const spl_token_1 = require("@solana/spl-token");
const errors_1 = require("../types/errors");
/**
 *
 * @param {web3.PublicKey} key - Public Key of the existing storage account
 * @param {number} amount - amount of $SHDW to transfer to stake account
 * @returns {txid: string} - confirmed transaction id
 */
function topUp(key, amount, priorityFee = 100000) {
    return __awaiter(this, void 0, void 0, function* () {
        let stakeAccount = (yield (0, helpers_1.getStakeAccount)(this.program, key))[0];
        const ownerAta = yield (0, helpers_1.findAssociatedTokenAddress)(this.wallet.publicKey, common_1.tokenMint);
        const txn = new anchor_1.web3.Transaction();
        const transferInstruction = (0, spl_token_1.createTransferInstruction)(ownerAta, stakeAccount, this.wallet.publicKey, new anchor_1.BN(amount).toNumber(), undefined, spl_token_1.TOKEN_PROGRAM_ID);
        const computePriceIx = anchor_1.web3.ComputeBudgetProgram.setComputeUnitPrice({
            microLamports: Math.ceil(priorityFee),
        });
        const [units, blockHashInfo] = yield Promise.all([
            (0, helpers_1.getSimulationUnits)(this.connection, [computePriceIx, transferInstruction], this.wallet.publicKey),
            this.connection,
        ]);
        if (typeof units !== "undefined") {
            txn.add(anchor_1.web3.ComputeBudgetProgram.setComputeUnitLimit({ units }));
        }
        txn.add(computePriceIx);
        txn.add(transferInstruction);
        try {
            let blockInfo = yield this.connection.getLatestBlockhash();
            txn.recentBlockhash = blockInfo.blockhash;
            txn.feePayer = this.wallet.publicKey;
            const signedTx = yield this.wallet.signTransaction(txn);
            const res = yield anchor_1.web3.sendAndConfirmRawTransaction(this.connection, signedTx.serialize(), { skipPreflight: false, commitment: "confirmed" });
            return Promise.resolve({ txid: res });
        }
        catch (e) {
            const parsedError = (0, errors_1.fromTxError)(e);
            if (parsedError !== null) {
                return Promise.reject(new Error(parsedError.msg));
            }
            else {
                return Promise.reject(new Error(e.message));
            }
        }
    });
}
exports.default = topUp;
//# sourceMappingURL=top-up.js.map