"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const anchor_1 = require("@coral-xyz/anchor");
const helpers_1 = require("../utils/helpers");
const common_1 = require("../utils/common");
const spl_token_1 = require("@solana/spl-token");
const node_fetch_1 = __importDefault(require("node-fetch"));
const instructions_1 = require("../types/instructions");
const accounts_1 = require("../types/accounts");
/**
 *
 * @param {web3.PublicKey} key - Public Key of the existing storage to increase size on
 * @param {string} size - Amount of storage you are requesting to add to your storage account. Should be in a string like '1KB', '1MB', '1GB'. Only KB, MB, and GB storage delineations are supported currently.
 * @returns {ShadowDriveResponse} Confirmed transaction ID
 */
function addStorage(key, size, priorityFee = 100000) {
    return __awaiter(this, void 0, void 0, function* () {
        let storageInputAsBytes = (0, helpers_1.humanSizeToBytes)(size);
        let selectedAccount = yield accounts_1.StorageAccountV2.fetch(this.connection, key);
        if (storageInputAsBytes === false) {
            return Promise.reject(new Error(`${size} is not a valid input for size. Please use a string like '1KB', '1MB', '1GB'.`));
        }
        let userInfoAccount = yield accounts_1.UserInfo.fetch(this.connection, this.userInfo);
        if (userInfoAccount === null) {
            return Promise.reject(new Error("You have not created a storage account on Shadow Drive yet. Please see the 'create-storage-account' command to get started."));
        }
        const ownerAta = yield (0, helpers_1.findAssociatedTokenAddress)(selectedAccount.owner1, common_1.tokenMint);
        let stakeAccount = (yield (0, helpers_1.getStakeAccount)(this.program, key))[0];
        try {
            const storageUsed = yield (0, helpers_1.getStorageAccountSize)(key.toString());
            const emissionsAta = yield (0, helpers_1.findAssociatedTokenAddress)(common_1.emissions, common_1.tokenMint);
            let txn = new anchor_1.web3.Transaction();
            switch (selectedAccount.immutable) {
                case true:
                    const increaseImmutableStorageIx = (0, instructions_1.increaseImmutableStorage2)({
                        additionalStorage: new anchor_1.BN(storageInputAsBytes),
                    }, {
                        storageConfig: this.storageConfigPDA,
                        storageAccount: key,
                        owner: selectedAccount.owner1,
                        ownerAta,
                        uploader: common_1.uploader,
                        emissionsWallet: emissionsAta,
                        tokenMint: common_1.tokenMint,
                        systemProgram: anchor_1.web3.SystemProgram.programId,
                        tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
                    });
                    const immutableComputePriceIx = anchor_1.web3.ComputeBudgetProgram.setComputeUnitPrice({
                        microLamports: Math.ceil(priorityFee),
                    });
                    const [immutableUnits, immutableBlockhashInfo] = yield Promise.all([
                        (0, helpers_1.getSimulationUnits)(this.connection, [
                            immutableComputePriceIx,
                            increaseImmutableStorageIx,
                        ], this.wallet.publicKey),
                        this.connection,
                    ]);
                    if (typeof immutableUnits !== "undefined") {
                        txn.add(anchor_1.web3.ComputeBudgetProgram.setComputeUnitLimit({
                            units: immutableUnits,
                        }));
                    }
                    txn.add(immutableComputePriceIx);
                    txn.add(increaseImmutableStorageIx);
                    break;
                case false:
                    const increaseStorageIx = (0, instructions_1.increaseStorage2)({
                        additionalStorage: new anchor_1.BN(storageInputAsBytes),
                    }, {
                        storageConfig: this.storageConfigPDA,
                        storageAccount: key,
                        owner: selectedAccount.owner1,
                        ownerAta,
                        stakeAccount,
                        uploader: common_1.uploader,
                        tokenMint: common_1.tokenMint,
                        systemProgram: anchor_1.web3.SystemProgram.programId,
                        tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
                    });
                    const computePriceIx = anchor_1.web3.ComputeBudgetProgram.setComputeUnitPrice({
                        microLamports: Math.ceil(priorityFee),
                    });
                    const [units, blockHashInfo] = yield Promise.all([
                        (0, helpers_1.getSimulationUnits)(this.connection, [computePriceIx, increaseStorageIx], this.wallet.publicKey),
                        this.connection,
                    ]);
                    if (typeof units !== "undefined") {
                    }
                    txn.add(anchor_1.web3.ComputeBudgetProgram.setComputeUnitLimit({ units }));
                    txn.add(computePriceIx);
                    txn.add(increaseStorageIx);
                    break;
            }
            txn.recentBlockhash = (yield this.connection.getLatestBlockhash()).blockhash;
            txn.feePayer = this.wallet.publicKey;
            let signedTx;
            let serializedTxn;
            if (!common_1.isBrowser) {
                yield txn.partialSign(this.wallet.payer);
                serializedTxn = txn.serialize({ requireAllSignatures: false });
            }
            else {
                signedTx = yield this.wallet.signTransaction(txn);
                serializedTxn = signedTx.serialize({ requireAllSignatures: false });
            }
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 7200000);
            const addStorageResponse = yield (0, node_fetch_1.default)(`${common_1.SHDW_DRIVE_ENDPOINT}/add-storage`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    transaction: Buffer.from(serializedTxn.toJSON().data).toString("base64"),
                    storage_account: key,
                    amount_to_add: storageInputAsBytes,
                    storageUsed: storageUsed,
                }),
                signal: controller.signal,
            });
            if (!addStorageResponse.ok) {
                return Promise.reject(new Error(`Server response status code: ${addStorageResponse.status} \n
		  Server response status message: ${(yield addStorageResponse.json()).error}`));
            }
            const responseJson = yield addStorageResponse.json();
            return Promise.resolve(responseJson);
        }
        catch (e) {
            return Promise.reject(new Error(e.message));
        }
    });
}
exports.default = addStorage;
//# sourceMappingURL=add-storage.js.map