"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const accounts_1 = require("../types/accounts");
/**
 *
 * Get a single storage account for the current user
 * @param {PublicKey} key - Publickey of a Storage Account
 * @returns {StorageAccountResponse} - Requested Storage Account
 *
 */
function getStorageAcc(key) {
    return __awaiter(this, void 0, void 0, function* () {
        let storageAccount;
        let userInfoAccount = yield accounts_1.UserInfo.fetch(this.connection, this.userInfo);
        if (userInfoAccount === null) {
            return Promise.reject(new Error("You have not created a storage account on Shadow Drive yet. Please see the 'create-storage-account' command to get started."));
        }
        try {
            storageAccount = yield this.program.account.storageAccountV2.fetch(key);
            return Promise.resolve(storageAccount);
        }
        catch (e) {
            return Promise.reject(new Error(e.message));
        }
    });
}
exports.default = getStorageAcc;
//# sourceMappingURL=get-storage-account.js.map