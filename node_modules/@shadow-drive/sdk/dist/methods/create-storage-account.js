"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const anchor_1 = require("@coral-xyz/anchor");
const helpers_1 = require("../utils/helpers");
const common_1 = require("../utils/common");
const spl_token_1 = require("@solana/spl-token");
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const instructions_1 = require("../types/instructions");
const accounts_1 = require("../types/accounts");
/**
 *
 * @param {string} name - What you want your storage account to be named. (Does not have to be unique)
 * @param {string} size - Amount of storage you are requesting to create. Should be in a string like '1KB', '1MB', '1GB'. Only KB, MB, and GB storage delineations are supported currently.
 * @returns {CreateStorageResponse} Created bucket and transaction signature
 */
function createStorageAccount(name, size, priorityFee = 100000) {
    return __awaiter(this, void 0, void 0, function* () {
        let storageInputAsBytes = (0, helpers_1.humanSizeToBytes)(size);
        if (storageInputAsBytes === false) {
            return Promise.reject(new Error(`${size} is not a valid input for size. Please use a string like '1KB', '1MB', '1GB'.`));
        }
        // If userInfo hasn't been initialized, default to 0 for account seed
        let userInfoAccount = yield accounts_1.UserInfo.fetch(this.connection, this.userInfo);
        let accountSeed = new anchor_1.BN(0);
        if (userInfoAccount !== null) {
            accountSeed = new anchor_1.BN(userInfoAccount.accountCounter);
        }
        let storageRequested = new anchor_1.BN(storageInputAsBytes.toString()); // 2^30 B <==> 1GB
        // Retreive storageAccount
        let storageAccount = (yield (0, helpers_1.getStorageAccount)(this.program, this.wallet.publicKey, accountSeed))[0];
        // Retrieve stakeAccount
        let stakeAccount = (yield (0, helpers_1.getStakeAccount)(this.program, storageAccount))[0];
        let ownerAta = yield (0, helpers_1.findAssociatedTokenAddress)(this.wallet.publicKey, common_1.tokenMint);
        let txn = new anchor_1.web3.Transaction();
        const initializeAccountIx2 = (0, instructions_1.initializeAccount2)({
            identifier: name,
            storage: storageRequested,
        }, {
            storageConfig: this.storageConfigPDA,
            userInfo: this.userInfo,
            storageAccount,
            stakeAccount,
            tokenMint: common_1.tokenMint,
            owner1: this.wallet.publicKey,
            uploader: common_1.uploader,
            owner1TokenAccount: ownerAta,
            systemProgram: anchor_1.web3.SystemProgram.programId,
            tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
            rent: anchor_1.web3.SYSVAR_RENT_PUBKEY,
        });
        const computePriceIx = anchor_1.web3.ComputeBudgetProgram.setComputeUnitPrice({
            microLamports: Math.ceil(priorityFee),
        });
        const [units, blockHashInfo] = yield Promise.all([
            (0, helpers_1.getSimulationUnits)(this.connection, [computePriceIx, initializeAccountIx2], this.wallet.publicKey),
            this.connection,
        ]);
        if (typeof units !== undefined) {
            txn.add(anchor_1.web3.ComputeBudgetProgram.setComputeUnitLimit({ units }));
        }
        txn.add(computePriceIx);
        txn.add(initializeAccountIx2);
        try {
            txn.recentBlockhash = (yield this.connection.getLatestBlockhash()).blockhash;
            txn.feePayer = this.wallet.publicKey;
            let signedTx;
            let serializedTxn;
            if (!common_1.isBrowser) {
                yield txn.partialSign(this.wallet.payer);
                serializedTxn = txn.serialize({ requireAllSignatures: false });
            }
            else {
                signedTx = yield this.wallet.signTransaction(txn);
                serializedTxn = signedTx.serialize({ requireAllSignatures: false });
            }
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 7200000);
            const createStorageResponse = yield (0, cross_fetch_1.default)(`${common_1.SHDW_DRIVE_ENDPOINT}/storage-account`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    transaction: Buffer.from(serializedTxn.toJSON().data).toString("base64"),
                }),
                signal: controller.signal,
            });
            if (!createStorageResponse.ok) {
                return Promise.reject(new Error(`Server response status code: ${createStorageResponse.status} \n
		Server response status message: ${(yield createStorageResponse.json()).error}`));
            }
            const responseJson = (yield createStorageResponse.json());
            return Promise.resolve(responseJson);
        }
        catch (e) {
            return Promise.reject(new Error(e.message));
        }
    });
}
exports.default = createStorageAccount;
//# sourceMappingURL=create-storage-account.js.map